######################################################################################################
#                                                                                                    #
#                               goreleaser-example GoReleaser Configuration                          #
#                                                                                                    #
# goreleaser-example: https://github.com/nicholas-fedor/goreleaser-example                           #
# GoReleaser: https://goreleaser.com/                                                                #
#                                                                                                    #
######################################################################################################

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
version: 2

# https://goreleaser.com/customization/project/
project_name: goreleaser-example

######################################################################################################
# Go Binary Build Configuration
# https://goreleaser.com/customization/builds/go/
######################################################################################################
builds:
  - # Path to main.go file or main package.
    main: ./main.go

    # Binary name.
    binary: goreleaser-example

    # Custom flags.
    flags:
      # trims path
      - -trimpath

    # Custom ldflags.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Compile_packages_and_dependencies
    # and https://pkg.go.dev/cmd/link
    ldflags:
      - -s -w
      - -X main.version={{ .Version }}
      - -X main.commit={{ .ShortCommit }}
      - -X main.date={{ .CommitDate }}

    # Custom environment variables to be set during the builds.
    # Invalid environment variables will be ignored.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    env:
      - CGO_ENABLED=0

    # GOOS list to build for.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    goos:
      - linux
      - windows
      - darwin

    # GOARCH to build for.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    goarch:
      - amd64
      - "386"
      - arm
      - arm64
      - riscv64

    # GOARM to build for when GOARCH is arm.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    # and https://go.dev/wiki/MinimumRequirements#microarchitecture-support
    # Default: [ 6 ].

    # GOAMD64 to build when GOARCH is amd64.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    # and https://go.dev/wiki/MinimumRequirements#microarchitecture-support
    # Default: [ 'v1' ].

    # GO386 to build when GOARCH is 386.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    # and https://go.dev/wiki/MinimumRequirements#microarchitecture-support
    # Default: [ 'sse2' ].
    # Since: v2.4.

    # GORISCV64 to build when GOARCH is RISCV64.
    # For more info refer to: https://pkg.go.dev/cmd/go#hdr-Environment_variables
    # and https://go.dev/wiki/MinimumRequirements#microarchitecture-support
    # Default: [ 'rva20u64' ].
    # Since: v2.4.

    # List of combinations of GOOS + GOARCH + GOARM to ignore.
    ignore:
      - goos: darwin
        goarch: "386"
      - goos: windows
        goarch: arm64
      - goos: windows
        goarch: riscv64
      - goos: darwin
        goarch: riscv64

    # Set the modified timestamp on the output binary, typically
    # you would do this to ensure a build was reproducible.
    # Pass an empty string to skip modifying the output.
    mod_timestamp: "{{ .CommitTimestamp }}"
######################################################################################################

######################################################################################################
# Binary Archive Configuration
# https://goreleaser.com/customization/archive/
######################################################################################################
archives:
  - # Archive formats.
    #
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    #
    # Valid options are:
    # - `tar.gz`
    # - `tgz`
    # - `tar.xz`
    # - `txz`
    # - `tar.zst`
    # - `tzst` # Since: v2.1.
    # - `tar`
    # - `gz`
    # - `zip`
    # - `binary`
    #
    # Default: ['tar.gz'].
    formats: ["tar.gz"]

    # Archive name.
    #
    # Default:
    # - if format is `binary`:
    #   - `{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    # - if format is anything else:
    #   - `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    # Templates: allowed.
    name_template: >-
      {{- .ProjectName }}_
      {{- if eq .Os "darwin" }}macOS
      {{- else }}{{ .Os }}{{ end }}_
      {{- if eq .Arch "amd64" }}amd64
      {{- else if eq .Arch "386" }}i386
      {{- else if eq .Arch "arm" }}armhf
      {{- else if eq .Arch "arm64" }}arm64v8
      {{- else if eq .Arch "riscv64" }}riscv64
      {{- else }}{{ .Arch }}{{ end }}_
      {{- .Version -}}

    # Can be used to change the archive formats for specific GOOSs.
    # Most common use case is to archive as zip on Windows.
    format_overrides:
      - goos: windows
        formats: ["zip"]

    # Additional files/globs to add to the archive.
    #
    # Default: [ 'LICENSE*', 'README*', 'CHANGELOG', 'license*', 'readme*', 'changelog'].
    # Templates: allowed.
    files:
      - LICENSE
######################################################################################################

######################################################################################################
# SBOM Generation Configuration
# https://goreleaser.com/customization/sbom/
######################################################################################################
sboms:
  - # List of names of the SBOM documents created at this step
    # (relative to the dist dir).
    #
    # Each element configured is made available as variables. For example:
    #   documents: ["foo", "bar"]
    #
    # would make the following variables that can be referenced as template keys:
    #   document0: "foo"
    #   document1: "bar"
    #
    # Note that multiple sbom values are only allowed if the value of
    # "artifacts" is "any".
    #
    # Default:
    #   When "binary":   ["{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}.sbom.json"]
    #   When "any":      []
    #   Otherwise:       ["{{ .ArtifactName }}.sbom.json"]
    # Templates: allowed.
    documents:
      - "{{ .ArtifactName }}.sbom.json"

    # Path to the SBOM generator command
    #
    # Note: the process CWD will be set to the same location as "dist"
    #
    # Default: 'syft'.
    cmd: syft

    # Command line arguments for the command
    #
    # Default: ["$artifact", "--output", "spdx-json=$document"].
    # Templates: allowed.
    args:
      - "$artifact"
      - "--output"
      - "spdx-json=$document"

    # List of environment variables that will be passed to the SBOM command as
    # well as the templates.
    #
    # Default: [ "SYFT_FILE_METADATA_CATALOGER_ENABLED=true" ].

    # Which artifacts to catalog.
    #
    # Valid options are:
    # - any:        let the SBOM tool decide which artifacts available in
    #               the cwd should be cataloged
    # - source:     source archive
    # - package:    Linux packages (deb, rpm, apk, etc)
    # - installer:  Windows MSI installers (Pro only)
    # - diskimage:  macOS DMG disk images (Pro only)
    # - archive:    archives from archive pipe
    # - binary:     binaries output from the build stage
    #
    # Default: 'archive'.
    artifacts: archive
######################################################################################################

######################################################################################################
# Docker Image Build Configuration
# https://goreleaser.com/customization/docker/
######################################################################################################
dockers:
  - ##################################################################################################
    # goreleaser-example:amd64
    ##################################################################################################
    # ID of the image, used to reference in the `docker_signs` section.
    id: amd64

    # GOOS of the built binaries/packages that should be used.
    # Default: 'linux'.
    goos: linux

    # GOARCH of the built binaries/packages that should be used.
    goarch: amd64

    # GOAMD64 of the built binaries/packages that should be used.
    # Default: 'v1'.

    # Templates of the Docker image names.
    # Templates: allowed.
    image_templates:
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:amd64-{{ .Tag }}"
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:amd64-latest"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:amd64-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:amd64-latest"

    # Path to the Dockerfile (from the project root).
    # Default: 'Dockerfile'.
    # Templates: allowed.
    dockerfile: Dockerfile

    # Set the "backend" for the Docker pipe.
    # Valid options are: docker, buildx, podman.
    # Podman is a GoReleaser Pro feature and is only available on Linux.
    # Default: 'docker'.
    use: buildx

    # Docker build flags.
    # Templates: allowed.
    build_flag_templates:
      # Enables maximum provenance attestation for the Docker Buildx build, generating detailed build metadata for supply chain security.
      - --attest=type=provenance,mode=max
      # Generates a Software Bill of Materials (SBOM) attestation for the Docker Buildx build, documenting the software components in the image.
      - --attest=type=sbom
      # Specifies the target platform for the Docker image as Linux on AMD64 architecture.
      - "--platform=linux/amd64"
      # Specifies the name of the image
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      # Records the image creation timestamp
      - "--label=org.opencontainers.image.created={{ .Date }}"
      # Indicates the version of the software in the image
      - "--label=org.opencontainers.image.version={{ .Version }}"
      # Tracks the exact Git commit SHA used to build the image
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      # Points to the source repository URL
      - "--label=org.opencontainers.image.source={{ .GitURL }}"

  - ##################################################################################################
    # goreleaser-example:i386
    ##################################################################################################
    # ID of the image, used to reference in the `docker_signs` section.
    id: i386

    # GOOS of the built binaries/packages that should be used.
    # Default: 'linux'.
    goos: linux

    # GOARCH of the built binaries/packages that should be used.
    goarch: "386"

    # Templates of the Docker image names.
    # Templates: allowed.
    image_templates:
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:i386-{{ .Tag }}"
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:i386-latest"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:i386-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:i386-latest"

    # Path to the Dockerfile (from the project root).
    # Templates: allowed.
    # Default: 'Dockerfile'.
    dockerfile: Dockerfile

    # Set the "backend" for the Docker pipe.
    # Valid options are: docker, buildx, podman.
    # Podman is a GoReleaser Pro feature and is only available on Linux.
    # Default: 'docker'.
    use: buildx

    # Docker build flags.
    # Templates: allowed.
    build_flag_templates:
      # Enables maximum provenance attestation for the Docker Buildx build, generating detailed build metadata for supply chain security.
      - --attest=type=provenance,mode=max
      # Generates a Software Bill of Materials (SBOM) attestation for the Docker Buildx build, documenting the software components in the image.
      - --attest=type=sbom
      # Specifies the target platform for the Docker image as Linux on 386 architecture.
      - "--platform=linux/386"
      # Specifies the name of the image
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      # Records the image creation timestamp
      - "--label=org.opencontainers.image.created={{ .Date }}"
      # Indicates the version of the software in the image
      - "--label=org.opencontainers.image.version={{ .Version }}"
      # Tracks the exact Git commit SHA used to build the image
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      # Points to the source repository URL
      - "--label=org.opencontainers.image.source={{ .GitURL }}"

  - ##################################################################################################
    # goreleaser-example:armhf
    ##################################################################################################
    # ID of the image, used to reference in the `docker_signs` section.
    id: armhf

    # GOOS of the built binaries/packages that should be used.
    goos: linux

    # GOARCH of the built binaries/packages that should be used.
    goarch: arm

    # GOARM of the built binaries/packages that should be used.
    # Default: '6'.
    goarm: "6"

    # Templates of the Docker image names.
    # Templates: allowed.
    image_templates:
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:armhf-{{ .Tag }}"
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:armhf-latest"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:armhf-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:armhf-latest"

    # Path to the Dockerfile (from the project root).
    # Templates: allowed.
    # Default: 'Dockerfile'.
    dockerfile: Dockerfile

    # Set the "backend" for the Docker pipe.
    # Valid options are: docker, buildx, podman.
    # Podman is a GoReleaser Pro feature and is only available on Linux.
    # Default: 'docker'.
    use: buildx

    # Docker build flags.
    # Templates: allowed.
    build_flag_templates:
      # Enables maximum provenance attestation for the Docker Buildx build, generating detailed build metadata for supply chain security.
      - --attest=type=provenance,mode=max
      # Generates a Software Bill of Materials (SBOM) attestation for the Docker Buildx build, documenting the software components in the image.
      - --attest=type=sbom
      # Specifies the target platform for the Docker image as Linux on ARMv6 architecture.
      - "--platform=linux/arm/v6"
      # Specifies the name of the image
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      # Records the image creation timestamp
      - "--label=org.opencontainers.image.created={{ .Date }}"
      # Indicates the version of the software in the image
      - "--label=org.opencontainers.image.version={{ .Version }}"
      # Tracks the exact Git commit SHA used to build the image
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      # Points to the source repository URL
      - "--label=org.opencontainers.image.source={{ .GitURL }}"

  - ##################################################################################################
    # goreleaser-example:arm64v8
    ##################################################################################################
    # ID of the image, used to reference in the `docker_signs` section.
    id: arm64v8

    # GOOS of the built binaries/packages that should be used.
    goos: linux

    # GOARCH of the built binaries/packages that should be used.
    goarch: arm64

    # GOARM of the built binaries/packages that should be used.
    # Default: '6'.

    # Templates of the Docker image names.
    # Templates: allowed.
    image_templates:
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:arm64v8-{{ .Tag }}"
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:arm64v8-latest"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:arm64v8-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:arm64v8-latest"

    # Path to the Dockerfile (from the project root).
    # Templates: allowed.
    # Default: 'Dockerfile'.
    dockerfile: Dockerfile

    # Set the "backend" for the Docker pipe.
    # Valid options are: docker, buildx, podman.
    # Podman is a GoReleaser Pro feature and is only available on Linux.
    # Default: 'docker'.
    use: buildx

    # Docker build flags.
    # Templates: allowed.
    build_flag_templates:
      # Enables maximum provenance attestation for the Docker Buildx build, generating detailed build metadata for supply chain security.
      - --attest=type=provenance,mode=max
      # Generates a Software Bill of Materials (SBOM) attestation for the Docker Buildx build, documenting the software components in the image.
      - --attest=type=sbom
      # Specifies the target platform for the Docker image as Linux on ARM64 architecture.
      - "--platform=linux/arm64"
      # Specifies the name of the image
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      # Records the image creation timestamp
      - "--label=org.opencontainers.image.created={{ .Date }}"
      # Indicates the version of the software in the image
      - "--label=org.opencontainers.image.version={{ .Version }}"
      # Tracks the exact Git commit SHA used to build the image
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      # Points to the source repository URL
      - "--label=org.opencontainers.image.source={{ .GitURL }}"
  - ##################################################################################################
    # goreleaser-example:riscv64
    ##################################################################################################
    # ID of the image, used to reference in the `docker_signs` section.
    id: riscv64

    # GOOS of the built binaries/packages that should be used.
    # Default: 'linux'.
    goos: linux

    # GOARCH of the built binaries/packages that should be used.
    goarch: riscv64

    # Templates of the Docker image names.
    # Templates: allowed.
    image_templates:
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:riscv64-{{ .Tag }}"
      # - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:riscv64-latest"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:riscv64-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:riscv64-latest"

    # Path to the Dockerfile (from the project root).
    # Templates: allowed.
    # Default: 'Dockerfile'
    dockerfile: Dockerfile

    # Set the "backend" for the Docker pipe.
    # Valid options are: docker, buildx, podman.
    # Podman is a GoReleaser Pro feature and is only available on Linux.
    # Default: 'docker'.
    use: buildx

    # Docker build flags.
    # Templates: allowed.
    build_flag_templates:
      # Enables maximum provenance attestation for the Docker Buildx build, generating detailed build metadata for supply chain security.
      - --attest=type=provenance,mode=max
      # Generates a Software Bill of Materials (SBOM) attestation for the Docker Buildx build, documenting the software components in the image.
      - --attest=type=sbom
      # Specifies the target platform for the Docker image as Linux on RISCv64 architecture.
      - "--platform=linux/riscv64"
      # Specifies the name of the image
      - "--label=org.opencontainers.image.name={{ .ProjectName }}"
      # Records the image creation timestamp
      - "--label=org.opencontainers.image.created={{ .Date }}"
      # Indicates the version of the software in the image
      - "--label=org.opencontainers.image.version={{ .Version }}"
      # Tracks the exact Git commit SHA used to build the image
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      # Points to the source repository URL
      - "--label=org.opencontainers.image.source={{ .GitURL }}"

######################################################################################################
# Docker Manifest Configuration
# https://goreleaser.com/customization/docker_manifest/
######################################################################################################
docker_manifests:
  - # ID of the manifest, used to reference in the `docker_signs` section.
    id: ghcr

    # Name template for the manifest.
    # Templates: allowed.
    name_template: "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:{{ .Tag }}"

    # List of image templates to include in the manifest.
    image_templates:
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:amd64-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:i386-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:armhf-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:arm64v8-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:riscv64-{{ .Tag }}"

    # Whether to skip pushing the manifest to the registry.
    # Default: false
    skip_push: false

  - # ID of the manifest, used to reference in the `docker_signs` section.
    id: ghcr_latest

    # Name template for the manifest.
    # Templates: allowed.
    name_template: "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:latest"

    # List of image templates to include in the manifest.
    image_templates:
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:amd64-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:i386-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:armhf-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:arm64v8-{{ .Tag }}"
      - "ghcr.io/{{ .Env.GHCR_NAMESPACE }}/{{ .ProjectName }}:riscv64-{{ .Tag }}"

    # Whether to skip pushing the manifest to the registry.
    # Default: false
    skip_push: false

  #   Docker Hub manifests - Uncomment to use
  # - # ID of the manifest, used to reference in the `docker_signs` section.
  #   id: dockerhub

  #   # Name template for the manifest.
  #   # Templates: allowed.
  #   name_template: "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:{{ .Tag }}"

  #   # List of image templates to include in the manifest.
  #   image_templates:
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:amd64-{{ .Tag }}"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:i386-{{ .Tag }}"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:armhf-{{ .Tag }}"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:arm64v8-{{ .Tag }}"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:riscv64-{{ .Tag }}"

  #   # Whether to skip pushing the manifest to the registry.
  #   # Default: false
  #   skip_push: false

  # - # ID of the manifest, used to reference in the `docker_signs` section.
  #   id: dockerhub_latest

  #   # Name template for the manifest.
  #   # Templates: allowed.
  #   name_template: "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:latest"

  #   # List of image templates to include in the manifest.
  #   image_templates:
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:amd64-latest"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:i386-latest"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:armhf-latest"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:arm64v8-latest"
  #     - "{{ .Env.DOCKER_NAMESPACE }}/{{ .ProjectName }}:riscv64-latest"

  #   # Whether to skip pushing the manifest to the registry.
  #   # Default: false
  #   skip_push: false

######################################################################################################
# Image Signing Configuration
# https://goreleaser.com/customization/docker_sign/
######################################################################################################
docker_signs:
  - # ID of the sign config, must be unique.
    # Only relevant if you want to produce some sort of signature file.
    #
    # Default: 'default'.
    id: images

    # Path to the signature command.
    #
    # Default: 'cosign'.
    cmd: cosign

    # Command line arguments for the command.
    #
    # Default: ["sign", "--key=cosign.key", "${artifact}@${digest}", "--yes"].
    # Templates: allowed.
    args:
      - "sign"
      - "${artifact}@${digest}"
      - "--yes" # Non-interactive signing, per Sigstore CI Quickstart

    # Which artifacts to sign.
    #
    #   all:       all artifacts
    #   none:      no signing
    #   images:    only docker images
    #   manifests: only docker manifests
    #
    # Default: 'none'.
    artifacts: images

    # IDs of the artifacts to sign.
    ids:
      - amd64
      - i386
      - armhf
      - arm64v8
      - riscv64

    # List of environment variables that will be passed to the signing command
    # as well as the templates.
    env:
      - COSIGN_EXPERIMENTAL=true # Enable keyless signing

    # By default, the stdout and stderr of the signing cmd are discarded unless
    # GoReleaser is running with `--verbose` set.
    # You can set this to true if you want them to be displayed regardless.
    output: true

  - # ID of the sign config, must be unique.
    # Only relevant if you want to produce some sort of signature file.
    #
    # Default: 'default'.
    id: manifests

    # Path to the signature command.
    #
    # Default: 'cosign'.
    cmd: cosign

    # Command line arguments for the command.
    #
    # Default: ["sign", "--key=cosign.key", "${artifact}@${digest}", "--yes"].
    # Templates: allowed.
    args:
      - "sign"
      - "${artifact}@${digest}"
      - "--yes" # Non-interactive signing, per Sigstore CI Quickstart

    # Which artifacts to sign.
    #
    #   all:       all artifacts
    #   none:      no signing
    #   images:    only docker images
    #   manifests: only docker manifests
    #
    # Default: 'none'.
    artifacts: manifests

    # IDs of the artifacts to sign.
    ids:
      - ghcr
      - ghcr_latest
      # - dockerhub
      # - dockerhub_latest

    # List of environment variables that will be passed to the signing command
    # as well as the templates.
    env:
      - COSIGN_EXPERIMENTAL=true

    # By default, the stdout and stderr of the signing cmd are discarded unless
    # GoReleaser is running with `--verbose` set.
    # You can set this to true if you want them to be displayed regardless.
    output: true

######################################################################################################
# Artifact Signing Configuration
# https://goreleaser.com/customization/sign/
######################################################################################################
signs:
  - #
    # ID of the sign config, must be unique.
    #
    # Default: 'default'.
    id: default

    # Name of the signature file.
    #
    # Default: '${artifact}.sig'.
    # Templates: allowed.

    # Path to the signature command
    #
    # Default: 'gpg'.
    cmd: gpg

    # Command line arguments for the command
    #
    # to sign with a specific key use
    # args: ["-u", "<key id, fingerprint, email, ...>", "--output", "${signature}", "--detach-sign", "${artifact}"]
    #
    # Default: ["--output", "${signature}", "--detach-sign", "${artifact}"].
    # Templates: allowed.
    args:
      - "--batch"
      - "--local-user"
      - "nick@nickfedor.com"
      - "--yes"
      - "--pinentry-mode"
      - "loopback"
      - "--passphrase"
      - "${GPG_PASSPHRASE}"
      - "--output"
      - "${signature}"
      - "--detach-sign"
      - "${artifact}"

    # Which artifacts to sign
    #
    # Valid options are:
    # - none        no signing
    # - all:        all artifacts
    # - checksum:   checksum files
    # - source:     source archive
    # - package:    Linux packages (deb, rpm, apk, etc)
    # - installer:  Windows MSI installers (Pro only)
    # - diskimage:  macOS DMG disk images (Pro only)
    # - archive:    archives from archive pipe
    # - sbom:       any SBOMs generated for other artifacts
    # - binary:     binaries (only when `archives.format` is 'binary', use binaries_sign otherwise)
    #
    # Default: 'none'.
    artifacts: all

######################################################################################################

######################################################################################################
# Attestation Configuration
# https://goreleaser.com/customization/checksum
######################################################################################################
checksum:
  name_template: checksums.txt
######################################################################################################

######################################################################################################
# Changelog Configuration
# https://goreleaser.com/customization/changelog/
######################################################################################################
changelog:
  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author username to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog (requires a personal access token).
  # - `gitea`: uses the compare Gitea API, appending the author username to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables groups, sort, and any further formatting features.
  #
  # Default: 'git'.
  use: github

  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Empty means 'no sorting', it'll use the output of `git log` as is.
  #
  # Disabled when using 'github-native'.
  sort: asc

  # Further filter changelog entries.
  #
  # Disabled when using 'github-native'.
  filters:
    # Commit messages matching the regexp listed here will be the only ones
    # added to the changelog
    #
    # If include is not-empty, exclude will be ignored.
    #
    # Matches are performed against the first line of the commit message only.
    include:
      - "^feat"
      - "^fix"
######################################################################################################
