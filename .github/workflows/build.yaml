name: Build Release

on:
  workflow_call:
    inputs:
      project_name:
        description: "Name of the project for Docker image names"
        required: true
        type: string
      docker_namespace:
        description: "Docker Hub namespace for image names (e.g., 'nickfedor')"
        required: false
        type: string
      ghcr_namespace:
        description: "GitHub Container Registry namespace for image names (e.g., 'nicholas-fedor')"
        required: true
        type: string

jobs:
  # Build binaries, images, SBOMs, and attestations for production or development
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      CGO_ENABLED: 0
      TAG: ${{ github.ref_name }}
    permissions:
      contents: write # For code checkout and publishing releases
      packages: write # For pushing images to registries
      attestations: write # For generating provenance and SBOMs
      id-token: write # For OIDC auth to container registry
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0 # Full history for GoReleaser versioning.

      - name: Set up Go
        uses: actions/setup-go@8e57b58e57be52ac95949151e2777ffda8501267
        with:
          go-version: 1.25.x

      - name: Cache Go modules
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Set up QEMU # Enable multi-platform emulation.
        uses: docker/setup-qemu-action@05340d1c670183e7caabdb33ae9f1c80fae3b0c2
        with:
          platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8,linux/riscv64

      - name: Set up Docker Buildx # Configure multi-platform builds.
        uses: docker/setup-buildx-action@af1b253b8dc984466d22633f04ef341c1520ed2f
        with:
          driver: docker-container
          platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8,linux/riscv64
          use: true

      - name: Enable containerd snapshotter # Enable containerd for multi-platform builds
        run: |
          sudo bash -c 'echo "{\"features\": {\"containerd-snapshotter\": true}}" > /etc/docker/daemon.json'
          sudo systemctl restart docker

      - name: Install Syft for SBOM generation # Install Syft for GoReleaser SBOM generation
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # - name: Login to Docker Hub
      #   uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR # Authenticate to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a
        with:
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ github.token }}
          # DOCKER_NAMESPACE: ${{ inputs.docker_namespace }}
          GHCR_NAMESPACE: ${{ inputs.ghcr_namespace }}

      - name: Install Cosign
        run: |
          curl -sSfL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign

      - name: Sign Docker Images with Cosign (Keyless)
        run: |
          for arch in amd64 i386 armhf arm64v8 riscv64; do
            # Map architecture to platform for docker buildx inspect
            case $arch in
              amd64) platform="linux/amd64" ;;
              i386) platform="linux/386" ;;
              armhf) platform="linux/arm/v6" ;;
              arm64v8) platform="linux/arm64/v8" ;;
              riscv64) platform="linux/riscv64" ;;
            esac
            # Get the digest for the versioned tag (GHCR)
            digest_version=$(docker buildx imagetools inspect ghcr.io/${{ inputs.ghcr_namespace }}/${{ inputs.project_name }}:${arch}-${{ github.ref_name }} --format '{{range .Manifest.Manifests}}{{if eq .Platform.OSArchitecture "${platform}"}}{{.Digest}}{{end}}{{end}}')
            if [ -n "$digest_version" ]; then
              cosign sign ghcr.io/${{ inputs.ghcr_namespace }}/${{ inputs.project_name }}@${digest_version}
            else
              echo "Failed to retrieve digest for ${arch}-${{ github.ref_name }} (GHCR)"
              exit 1
            fi
            # Get the digest for the latest tag (GHCR)
            digest_latest=$(docker buildx imagetools inspect ghcr.io/${{ inputs.ghcr_namespace }}/${{ inputs.project_name }}:${arch}-latest --format '{{range .Manifest.Manifests}}{{if eq .Platform.OSArchitecture "${platform}"}}{{.Digest}}{{end}}{{end}}')
            if [ -n "$digest_latest" ]; then
              cosign sign ghcr.io/${{ inputs.ghcr_namespace }}/${{ inputs.project_name }}@${digest_latest}
            else
              echo "Failed to retrieve digest for ${arch}-latest (GHCR)"
              exit 1
            fi
            # Docker Hub signing (versioned tag)
            # digest_docker_version=$(docker buildx imagetools inspect ${{ inputs.docker_namespace }}/${{ inputs.project_name }}:${arch}-${{ github.ref_name }} --format '{{range .Manifest.Manifests}}{{if eq .Platform.OSArchitecture "${platform}"}}{{.Digest}}{{end}}{{end}}')
            # if [ -n "$digest_docker_version" ]; then
            #   cosign sign ${{ inputs.docker_namespace }}/${{ inputs.project_name }}@${digest_docker_version}
            # else
            #   echo "Failed to retrieve digest for ${arch}-${{ github.ref_name }} (Docker Hub)"
            #   exit 1
            # fi
            # Docker Hub signing (latest tag)
            # digest_docker_latest=$(docker buildx imagetools inspect ${{ inputs.docker_namespace }}/${{ inputs.project_name }}:${arch}-latest --format '{{range .Manifest.Manifests}}{{if eq .Platform.OSArchitecture "${platform}"}}{{.Digest}}{{end}}{{end}}')
            # if [ -n "$digest_docker_latest" ]; then
            #   cosign sign ${{ inputs.docker_namespace }}/${{ inputs.project_name }}@${digest_docker_latest}
            # else
            #   echo "Failed to retrieve digest for ${arch}-latest (Docker Hub)"
            #   exit 1
            # fi
          done
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_YES: "true" # Automatically accept Sigstore terms
        shell: bash

      - name: Upload binary SBOMs # Upload SBOMs for prod builds.
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: binary-sboms
          path: ./dist/*.sbom.json
          if-no-files-found: warn

      - name: Generate artifact attestation # Generate attestations for prod builds.
        uses: actions/attest-build-provenance@f0878de78276446bc2ff4a40ae81f8013db6d773
        with:
          subject-checksums: ./dist/checksums.txt

      - name: Clean up dist directory # Remove dist directory to avoid leftover artifacts.
        if: always()
        run: rm -rf dist
